
runner_server:
==============

o) runner-server: remove thin and foreman. Just use classic sinatra?

o) runner: run() needs to return 'ended' status if there is no volume
   in browser, if test returns 'ended' offer choice to fork.
   volume-collector service will gc old volumes

o) when it goes live the C#-Moq and C#-NUnit cyber-dojo.sh can be simplified to
   the ones in runner's server's start_files

o) add cpu/memory/swap limits
   See comments at https://github.com/cyber-dojo/commander/blob/master/docker-compose.yml
   See https://github.com/docker/docker/pull/9437
   for suggestion that some limits might be uid/gid based.
   Mike mentioned someone called Jan (a different one) who might know about this stuff.

   From [docker run --help]

   --blkio-weight value          Block IO (relative weight), between 10 and 1000
   --blkio-weight-device value   Block IO weight (relative device weight) (default []
   --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period
   --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota
   -c, --cpu-shares int          CPU shares (relative weight)
   --device-read-bps value       Limit read rate (bytes per second) from a device (default [])
   --device-read-iops value      Limit read rate (IO per second) from a device (default [])
   --device-write-bps value      Limit write rate (bytes per second) to a device (default [])
   --device-write-iops value     Limit write rate (IO per second) to a device (default [])
   --isolation string            Container isolation technology
   --kernel-memory string        Kernel memory limit
   -m, --memory string           Memory limit
   --memory-reservation string   Memory soft limit
   --memory-swap string          Swap limit equal to memory plus swap: '-1' to enable unlimited swap
   --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)
   --pids-limit int              Tune container pids limit (set -1 for unlimited)
   --ulimit value                Ulimit options (default [])

o) what if filename has a quote in it?

o) log assert_exec() fail in docker_runner.rb?

o) can you copying a changed file into the container via a named-pipe?
   - https://en.wikipedia.org/wiki/Named_pipe
   - https://github.com/shurizzle/ruby-mkfifo

   File.mkfifo('/tmp/file')
   tar -zcf /tmp/file | docker exec ... sh -c 'tar -zxf - -C /sandbox'
   IO.write('/tmp/file', content)
   `rm /tmp/file`

o) validate microservice parameters?
   - kata_id = 10 hex chars
   - avatar_name = one of the known 64 animals
   - max_seconds = integer (with max of 15 seconds?)
   - deleted_filenames (what chars are illegal in linux filename?)
   - changed_files

o) Should there be a volume per kata rather than per animal?
   Fits with the value-system of cyber-dojo.
   Keeps the number of volumes down too.
   Means hello()/goodbye() will only need kata_id.
   And could be renamed... new_kata(id), old_kata(id)
   Resuming an avatar will need to redo the new_kata(id).
   Problem is it introduces the need for multiple uid's, one per avatar.
   This information is not in the volume itself.





nginx:
======
$ docker logs cyber-dojo-nginx
2016/10/31 21:49:03 [emerg] 1#1: mkdir() "/var/cache/nginx/client_temp" failed (13: Permission denied)
nginx: [emerg] mkdir() "/var/cache/nginx/client_temp" failed (13: Permission denied)
2016/10/31 21:49:54 [warn] 1#1: the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:2
Changed to user root in docker-compose.yml
No longer get this diagnostic but still not getting images from nginx.
